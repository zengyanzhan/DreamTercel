<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">      
<!-- namespace 指明SQL语句映射针对于实体对象 -->
<mapper namespace="com.yidu.parameters.dao.ExchangeRateDao">
	<!-- 参数map类型 -->
	<parameterMap type="java.util.Map" id="selectExchangeRateInMap">
		<parameter property="tableName" mode="IN" jdbcType="VARCHAR"/>
		<parameter property="qualification" mode="IN" jdbcType="VARCHAR"/>
		<parameter property="page" mode="INOUT" jdbcType="INTEGER"/>
		<parameter property="rows" mode="INOUT" jdbcType="INTEGER"/>
		<parameter property="pageTotal" mode="OUT"  jdbcType="INTEGER"/>
		<parameter property="rowsTotal" mode="OUT"  jdbcType="INTEGER"/>
		<parameter property="orderColumn" mode="IN" jdbcType="VARCHAR"/>
		<parameter property="orderStyle" mode="IN" jdbcType="VARCHAR"/>
		<parameter property="cursor" mode="OUT" resultMap="selectExchangeRateOutMap" jdbcType="CURSOR"/>
	</parameterMap>
	<!-- 返回类型 -->
	<resultMap type="ExchangeRate" id="selectExchangeRateOutMap">
		<id column="exchange_code" property="exchangeCode"/>
		<result column="exchange_name" property="exchangeName"/>
		<result column="exchange_type" property="exchangeType"/>
		<result column="stamp_duty" property="stampDuty"/>
		<result column="transfer_fee" property="transferFee"/>
		<result column="management_fee" property="managementFee"/>
		<result column="brokerage_fee" property="brokerageFee"/>
		<result column="exchange_breed_rate_desc" property="exchangeDesc"/>
	</resultMap>
	<select id="selectExchangeRate" parameterMap="selectExchangeRateInMap" statementType="CALLABLE">
		call pk_select.sp_select_pagination(?,?,?,?,?,?,?,?,?)
	</select>
	<select id="selectExchangeRateById" parameterType="String" resultType="ExchangeRate">
		select exchange_code as exchangeCode,exchange_name as exchangeName,exchange_type as exchangeType,stamp_duty as stampDuty,transfer_fee as transferFee,management_fee as managementFee,brokerage_fee as brokerageFee,exchange_breed_rate_desc as exchangeDesc from exchange_breed_rate 
		where exchange_code=#{exchangeCode}
	</select>
	<insert id="insertExchangeRate" parameterType="ExchangeRate" >
		insert into exchange_breed_rate
		(exchange_code,exchange_name,exchange_type,stamp_duty,transfer_fee,management_fee,brokerage_fee,exchange_breed_rate_desc) 
			values(#{exchangeCode},#{exchangeName},#{exchangeType},#{stampDuty},#{transferFee},#{managementFee},#{brokerageFee},#{exchangeDesc})
	</insert>
	<update id="updateExchangeRate" parameterType="ExchangeRate">
	update exchange_breed_rate set  
	exchange_name=#{exchangeName},exchange_type=#{exchangeType},stamp_duty=#{stampDuty},transfer_fee=#{transferFee},management_fee=#{managementFee},brokerage_fee=#{brokerageFee},exchange_breed_rate_desc=#{exchangeDesc}
	where exchange_code=#{exchangeCode}
	</update>
	<delete id="deleteExchangeRate" parameterType="ExchangeRate">
		delete from exchange_breed_rate where exchange_code in (${exchangeCode})
	</delete>
	<select id="selectExchangeRateByExchangeNameAndSecurityType" parameterType="ExchangeRate" resultType="ExchangeRate">
	select exchange_code as exchangeCode,exchange_name as exchangeName,exchange_type as exchangeType,stamp_duty as stampDuty,transfer_fee as transferFee,management_fee as managementFee,brokerage_fee as brokerageFee,exchange_breed_rate_desc as exchangeDesc from exchange_breed_rate 
		where exchange_name=#{exchangeName} and exchange_type=#{exchangeType}
	</select>
	<select id="selectExchangeNameSel" parameterType="ExchangeRate" resultMap="selectExchangeRateOutMap">
	    select * from exchange_breed_rate where exchange_name =#{exchangeName} and exchange_type=#{exchangeType}
	</select>
	
</mapper>